{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nlibrary(DT)\nlibrary(ggplot2)\n\nshinyServer(function(input, output) {\n  source(\"localAlignment.R\")\n  obClick<-0\n  obSub<<-0\n  test_str<-localAlignment(\"KRSLWRSRAPG\",\"SRLWRSG\",list(\"sc_mat\"=1,\n                                                   \"mt_gap\"=-10,\"mt_ext\"=-1))\n  \n  output$dp_table = DT::renderDataTable(\n    test_str$dp_table,class = 'cell-border stripe',\n    server = TRUE,\n    selection = list(target = 'cell',selected = test_str$optimal),\n    \n    options = list(dom = 't',bSort=FALSE,pageLength = 100)\n  )\n  \n  output_mat<-matrix(0,1,6)\n  opt_res<-data.frame()\n  colnames(output_mat)<-c(\"Score\",\"Start\",\"End\",\"Length\",\"String1\",\"String2\")\n  output_mat<<-as.data.frame(output_mat)\n  output$res_table = DT::renderDataTable(\n    output_mat,class = 'cell-border stripe',\n    server = TRUE,\n    selection = list(target = 'row',mode='single'),\n    options = list(pageLength = 10)\n  )\n  \n  select_path<-list()\n  \n  proxy = dataTableProxy('dp_table')\n  \n  \n  # observeEvent(input$rows, {\n  #   print(input$rows)\n  #   print(Sys.time())\n  #   proxy %>% selectCells(as.numeric(c(2,2)))\n  #   #proxy %>% selectRows(1)\n  #   \n  # })\n  \n  observeEvent(input$align_but, {\n    \n    obClick<<-0\n    \n    if(input$score_matric==\"BLOSUM62\")\n      sc_mat<-1\n    else\n      sc_mat<-2\n    mat_val<-list(\"sc_mat\"=sc_mat,\n                  \"mt_gap\"=input$s_gap,\"mt_ext\"=input$s_ext)\n\n    test_str<<-localAlignment(input$str1,input$str2,mat_val)\n    print(test_str)\n    output$dp_table = DT::renderDataTable(\n      test_str$dp_table,class = 'cell-border stripe',\n      server = TRUE,\n      selection = list(target = 'cell',selected = test_str$optimal),\n      options = list(dom = 't',bSort=FALSE,pageLength = 100)\n    )\n    mat<-matrix(0,1,6)\n    colnames(mat)<-c(\"Score\",\"Start\",\"End\",\"Length\",\"String1\",\"String2\")\n    \n    \n    \n  })\n \n  #MFRTKRSALVRRLWRSRAPGGEDEEEGAGGGGGGGELRGEGATDSRAHGAGGGGPGRAGCCLGKAVRGAKGHHHPHPPAAGAGAAGGAEADLKALTHSVLKKLKERQLELLLQAVESRGGTRTACLLLPGRLDCRLGPGAPAGAQPAQPPSSYSLPLLLCKVFRWPDLRHSSEVKRLCCCESYGKINPELVCCNPHHLSRLCELESPPPPYSRYPMDFLKPTADCPDAVPSSAETGGTNYLAPGGLSDSQLLLEPGDRSHWCVVAYWEEKTRVGRLYCVQEPSLDIFYDLPQGNGFCLGQLNSDNKSQLVQKVRSKIGCGIQLTREVDGVWVYNRSSYPIFIKSATLDNPDSRTLLVHKVFPGFSIKAFDYEKAYSLQRPNDHEFMQQPWTGFTVQISFVKGWGQCYTRQFISSCPCWLEVIFNSR\n  observeEvent(input$get_sub, {\n    \n    obSub<<-1\n    threshold<-input$s_threshold\n    opt_res<<-getSubOptimal(threshold,test_str$dp_table,test_str$path_table)\n    opt_res_plot<<-getSubOptimalForPlot(threshold,test_str$dp_table,test_str$path_table)\n    \n    #output_mat<<-matrix(0,0,6)\n    #colnames(output_mat)<<-c(\"Score\",\"Start\",\"End\",\"Length\",\"String1\",\"String2\")\n    #output_mat<<-as.data.frame(output_mat)\n    #output_mat<<-transform(output_mat,Score = as.numeric(Score))\n    \n    #tp<-opt_res[[2]]\n\n\n    output$res_table = DT::renderDataTable(\n      opt_res,class = 'cell-border stripe',\n      server = TRUE,\n      selection = list(target = 'row',mode='single'),\n      options = list(pageLength = 10),rownames=NULL\n    )\n    \n    istr1<-input$str1\n    istr2<-input$str2\n    \n    str1_len<-nchar(input$str1)\n    str2_len<-nchar(input$str2)\n    \n    brks=c(1:str2_len)\n    labs=strsplit(istr2,\"\")[[1]]\n    \n    output$dotplot<-renderPlot({\n      ggplot(opt_res_plot,aes(Y,X,group=GP,color=\"red\"))+\n        geom_point()+\n        geom_line()+ \n        scale_y_reverse()\n    })\n    #print(output_mat)\n    \n    #print(output_mat)\n    #print(opt_res)\n    #output$sub_UI <-renderUI({\n    #  selectInput('sub_list', 'Suboptiomal', opt_res, multiple=TRUE, selectize=FALSE)\n    # })\n\n    #obSub<<-0\n  })\n  \n  \n  observeEvent(input$dp_table_cells_selected, {\n    \n    if(obClick==0)\n    {\n      obClick<<-1\n      return(NULL)\n    }\n\n    last_select<-tail(input$dp_table_cells_selected,n=1)\n    \n    if (length(last_select)&&(last_select[2]!=0)) \n      {\n      print(last_select)\n      nowSel<-tail(input$dp_table_cells_selected,n=1)\n      select_path<-getPath(test_str$path_table,nowSel[1],nowSel[2])\n\n    mm<-matrix(0,0,2)\n\n    for (j in 1:length(select_path)) {\n      mm<-rbind(mm,select_path[[j]])\n    }\n    proxy %>% selectCells(NULL)\n    proxy %>% selectCells(mm)\n\n    \n    }\n    \n  })\n  \n  \n  #SubOptimal Table\n  \n  observeEvent(input$res_table_rows_selected, {\n    \n    if(obSub==0)\n      return(NULL)\n    last_select<-tail(input$res_table_rows_selected,n=1)\n    print(last_select)\n    tp_row<-as.character(opt_res[last_select,\"end\"])\n    #print(as.character(tp_row))\n    end_loc<-strsplit(tp_row,\",\")[[1]]\n    end_loc<-as.numeric(end_loc)+1 # for title\n    #print(end_loc[1])\n    \n    if (length(last_select)) \n    {\n      select_path<-getPath(test_str$path_table,end_loc[1],end_loc[2])\n      \n      mm<-matrix(0,0,2)\n      \n      for (j in 1:length(select_path)) {\n        mm<-rbind(mm,select_path[[j]])\n      }\n      proxy %>% selectCells(NULL)\n      proxy %>% selectCells(mm)\n\n    }\n    \n  })\n  \n  \n  # print the selected indices\n  output$output_area = renderPrint({\n    \n    last_select<-tail(input$dp_table_cells_selected,n=1)\n    \n    if (length(last_select)&&(last_select[2]!=0)) {\n      \n      nowSel<-tail(input$dp_table_cells_selected,n=1)\n      select_path<-getPath(test_str$path_table,nowSel[1],nowSel[2])\n      cat('Selected Path:\\n')\n      \n      path_str<-getPathStr(select_path,test_str$path_table,test_str$dp_table)\n      cat(sprintf(\"%5d  %s  %5d\\n\", path_str$start_loc[1],path_str$t1,path_str$end_loc[1]))\n      cat(sprintf(\"%5d  %s  %5d\\n\", path_str$start_loc[2],path_str$t2,path_str$end_loc[2]))\n      cat(\"\\nScore:\",test_str$dp_table[nowSel[1],nowSel[2]],\"\\n\")\n      \n      cat(\"\\n=================\\n\")\n      print(test_str$setting)\n      \n      \n    }\n  })\n  \n  \n})\n",
    "created" : 1480115833954.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1367635478",
    "id" : "49E1755B",
    "lastKnownWriteTime" : 1480120479,
    "last_content_update" : 1480120479975,
    "path" : "C:/Users/shanc/Google Drive/2016F/CSC530/FinalProject/local_alignment/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}