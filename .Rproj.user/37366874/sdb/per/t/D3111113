{
    "collab_server" : "",
    "contents" : "f_left=1\nf_up  =2\nf_diag=3\n\nf_up_left=4 # left | up\nf_diag_up=5 # diag | up\nf_diag_left=6 # diag | left\nf_all=7  # all\n\nrow_gap_status<-0\ncol_gap_status<-c()\n\nlocalAlignment <-function(t1,t2,settingValue)\n{\n  #print(settingValue)\n  #row_gap_status<-0\n  \n  t1<-paste(\"-\",t1,sep=\"\")\n  t2<-paste(\"-\",t2,sep=\"\")\n  t1_vec<-strsplit(t1,\"\")\n  t2_vec<-strsplit(t2,\"\")\n  t1_len<-nchar(t1)\n  t2_len<-nchar(t2)\n  \n  row_gap_status<<-0\n  col_gap_status<<-rep(0,t2_len)\n  \n  if(settingValue$sc_mat==1)\n    score_mat<<-read.table(\"BLOSUM62.csv\",row.names = 1,header=TRUE,check.names = FALSE)\n  else\n    score_mat<<-read.table(\"PAM250.csv\",row.names = 1,header=TRUE,check.names = FALSE)\n  \n  #col_gap_status<-c(0,t2_len)\n  \n  \n  dp_table <-matrix(0,t1_len,t2_len,byrow = \"T\")\n  path_table <-matrix(0,t1_len,t2_len,byrow = \"T\")\n  \n  colnames(dp_table) <-t2_vec[[1]]\n  rownames(dp_table) <-t1_vec[[1]]\n\n  for (i in 2:t1_len) {\n    for (j in 2:t2_len) {\n      dp_ret<-getDPValue(dp_table,i,j,settingValue)\n      \n      #print(gap_status)\n      #sc_mat=1 Bl62\n      #sc_mat=2 PAM250\n      \n      dp_table[i,j]=dp_ret[2]\n      if(dp_ret[2]!=0)\n        path_table[i,j]=dp_ret[1]\n    }\n  }\n  print(dp_table)\n  print(path_table)\n  #print(\"Paht is:\")\n  \n  maxval<-which(dp_table==dp_table[which.max(dp_table)],arr.ind=T)\n  \n  mm<-matrix(0,0,2)\n  for (i in 1:(length(maxval)/2)) {\n    path<-getPath(path_table,maxval[i,1],maxval[i,2])\n    \n    for (j in 1:length(path)) {\n      mm<-rbind(mm,path[[j]])\n    }\n    \n    #print(path)\n    getPathStr(path,path_table,dp_table)\n  }\n  \n  final_res<-list(\"dp_table\"=dp_table,\"path_table\"=path_table,\"setting\"=settingValue,\"optimal\"=mm)\n  return(final_res)\n  \n}\n\ngetDPValue <-function(dp_table,i,j,settingValue)\n{\n\n  dp_row_name<-rownames(dp_table)[i]\n  dp_col_name<-colnames(dp_table)[j]\n  \n  cur_mis_match<-score_mat[dp_row_name,dp_col_name]\n  \n  pen_gap <-settingValue$mt_gap\n  pen_ext<- settingValue$mt_ext\n\n  #print(col_gap_status)\n  \n  if(col_gap_status[j]==0) # open a gap\n  {\n    val_up<-dp_table[i-1,j]+pen_gap+pen_ext\n  }\n  else #extension\n  {\n    val_up<-dp_table[i-1,j]+pen_ext\n  }\n  \n  if(row_gap_status==0) # open a gap\n  {\n    val_left<-dp_table[i,j-1]+pen_gap+pen_ext\n    \n  }\n  else #extension\n  {\n    val_left<-dp_table[i,j-1]+pen_ext\n  }\n\n  \n  val_up_left <- dp_table[i-1,j-1]+cur_mis_match\n\n  \n  \n  tpArr<-c(val_up_left,val_up,val_left,0)\n  res<-max(tpArr);\n  \n  #TAGAACAGAACGG\n  #GGAACAGAACGAGAAC\n  valfrom<-0\n  if(res==val_up_left)\n  {\n    valfrom<-3\n    row_gap_status<<-0\n    col_gap_status[j]<<-0\n  }\n    \n  else if(res==val_up)\n  {\n    col_gap_status[j]<<- 1\n    row_gap_status<<-0\n    valfrom<-2\n  }\n    \n  else\n  {\n    row_gap_status<<- 1\n    col_gap_status[j]<<-0\n    valfrom<-1\n  }\n   \n  \n  # \n  # len_max<-length(which(tpArr==max(tpArr)))\n  # if(len_max>1&&res!=0)\n  # {\n  #   if(len_max==3)\n  #     valfrom<-f_all\n  #   if(len_max==2)\n  #   {\n  #     if(val_up_left==val_up)\n  #       valfrom<-f_diag_up\n  #     if(val_up_left==val_left)\n  #       valfrom<-f_diag_left\n  #     if(val_up==val_left)\n  #       valfrom<-f_up_left\n  #   }\n  # }\n  # \n  ret <-c(valfrom,res)\n # print(ret)\n  return(ret)\n}\n\ngetPath<-function(path_table,row,col)\n{\n  path<-list()\n  path_mat<-matrix()\n  if(path_table[row,col]==0)\n  {\n    path<-c(path,list(c(row,col)))\n    return(path)\n  }\n\n  while(1)\n  {\n      if(path_table[row,col]==0)\n      {\n        #<-c(path,list(c(row,col)))\n        break\n      }\n      \n      if(path_table[row,col]==1)\n      {\n        path<-c(path,list(c(row,col)))\n        col<-col-1\n      }\n      else if(path_table[row,col]==2)\n      {\n        path<-c(path,list(c(row,col)))\n        row<-row-1\n      }\n      else if(path_table[row,col]==3)\n      {\n        path<-c(path,list(c(row,col)))\n        row<-row-1\n        col<-col-1\n      }\n    \n  }\n  return(rev(path))\n}\n\n\ngetPath_mult_path<-function(path_table,row,col)\n{\n  path<-list()\n  result<-list()\n  if(path_table[row,col]==0)\n  {\n    path<-c(path,list(c(row,col)))\n    return(path)\n  }\n  \n  while(1)\n  {\n    if(path_table[row,col]==0)\n    {\n      #path<-c(path,list(c(row,col)))\n      break\n    }\n    \n    if(path_table[row,col]==1)\n    {\n      path<-c(path,list(c(row,col)))\n      col<-col-1\n    }\n    else if(path_table[row,col]==2)\n    {\n      path<-c(path,list(c(row,col)))\n      row<-row-1\n    }\n    else if(path_table[row,col]==3)\n    {\n      path<-c(path,list(c(row,col)))\n      row<-row-1\n      col<-col-1\n    }\n    \n    \n    if(path_table[row,col]==f_diag_up)\n    {\n      tp<-c(path,list(c(row,col)))\n      tp<-c(tp,getPath(path_table,row-1,col-1))\n      tp<-rev(tp)\n      print(\"from diag\")\n      print(tp)\n      print(\"from up\")\n      tp<-c(tp,getPath(path_table,row-1,col))\n      tp<-rev(tp)\n      print(tp)\n      \n      path<-c(path,list(c(row,col)))\n      row<-row-1\n      col<-col-1\n    }\n    \n    if(path_table[row,col]==f_diag_left)\n    {\n      tp<-c(path,list(c(row,col)))\n      \n      ntp<-c(getPath(path_table,row-1,col-1),rev(tp))\n      print(\"from diag\")\n      # print(ntp)\n      result<-c(result,list(ntp))\n      print(\"from left\")\n      ntp<-c(getPath(path_table,row,col-1),rev(tp))\n      #  print(ntp)\n      \n      result<-c(result,list(ntp))\n      \n      print(result)\n      path<-c(path,list(c(row,col)))\n      row<-row-1\n      col<-col-1\n    }\n    \n    if(path_table[row,col]==f_up_left)\n    {\n      tp<-c(path,list(c(row,col)))\n      ntp<-c()\n      ntp<-c(tp,getPath(path_table,row-1,col))\n      ntp<-rev(ntp)\n      print(\"from up\")\n      print(ntp)\n      print(\"from left\")\n      ntp<-c(tp,getPath(path_table,row,col-1))\n      ntp<-rev(ntp)\n      print(ntp)\n      \n      path<-c(path,list(c(row,col)))\n      row<-row-1\n      col<-col-1\n    }\n    \n    if(path_table[row,col]==f_all)\n    {\n      tp<-rev(c(path,list(c(row,col)))) #record current path\n      \n      ret<-getPath(path_table,row-1,col)\n      for (i in 1:length(ret)) {\n        \n      }\n      \n      tp<-c(tp,getPath(path_table,row-1,col))\n      tp<-rev(tp)\n      print(\"from up\")\n      print(tp)\n      print(\"from left\")\n      tp<-c(tp,getPath(path_table,row,col-1))\n      tp<-rev(tp)\n      print(tp)\n      print(\"from diag\")\n      tp<-c(tp,getPath(path_table,row-1,col-1))\n      tp<-rev(tp)\n      print(tp)\n      \n      \n      path<-c(path,list(c(row,col)))\n      row<-row-1\n      col<-col-1\n    }\n    \n    \n    \n    \n  }\n  \n  return(result)\n}\n\ngetPathStr<-function(path,path_table,dp_table)\n{\n  str1<-\"\"\n  str2<-\"\"\n  for (i in 1:length(path)) {\n    p_position<-path[[i]]\n    row<-p_position[1]\n    col<-p_position[2]\n    if(path_table[row,col]==f_left)\n    {\n      str1<-paste(str1,\"-\",sep=\"\")\n      str2<-paste(str2,colnames(dp_table)[p_position[2]],sep=\"\")\n    }\n    if(path_table[row,col]==f_up)\n    {\n      str1<-paste(str1,rownames(dp_table)[p_position[1]],sep=\"\")\n      str2<-paste(str2,\"-\",sep=\"\")\n    }\n    if(path_table[row,col]==f_diag&&path_table[row,col]!=0)\n    {\n      str1<-paste(str1,rownames(dp_table)[p_position[1]],sep=\"\")\n      str2<-paste(str2,colnames(dp_table)[p_position[2]],sep=\"\")\n    }\n  }\n  \n # print(str1)\n # print(str2)\n  \n  #print(path[[1]]-1)\n  #print(path[[length(path)]]-1)\n  return(list(\"t1\"=str1,\"t2\"=str2,\"start_loc\"=path[[1]]-1,\"end_loc\"=path[[length(path)]]-1))\n  \n}\n\n\n\n\n#Filter Part\ngetOptimal<-function(dp_table)\n{\n  \n}\n\n\ngetSubOptimal <-function(threshold,dp_table,path_table)\n{\n  \n  thr_res<-which(dp_table>=threshold,arr.ind=T)\n  #print(dp_table)\n  #print(thr_res)\n\n  \n  path_mat<-data.frame()\n  for (i in 1:(length(thr_res)/2)) {\n    score<-dp_table[thr_res[i,1],thr_res[i,2]]\n    path<-getPath(path_table,thr_res[i,1],thr_res[i,2])\n    ret<-getPathStr(path,path_table,dp_table)\n    tpl<-data.frame(Score=score,\n                    start=paste(ret$start_loc,collapse = \",\"),\n                    end=paste(ret$end_loc,collapse = \",\"),\n                    length=nchar(ret$t1),\n                    t1=ret$t1,\n                    t2=ret$t2)\n    path_mat<-rbind(path_mat,tpl)\n   # print(tpl)\n  }\n  #print(path_mat)\n  return(path_mat)\n}\n\n\ngetSubOptimalForPlot <-function(threshold,dp_table,path_table)\n{\n  \n  thr_res<-which(dp_table>=threshold,arr.ind=T)\n\n\n\n  mm<-data.frame()\n  \n  for (i in 1:(length(thr_res)/2)) {\n    path<-getPath(path_table,thr_res[i,1],thr_res[i,2])\n    for (j in 1:length(path)) {\n      tpc<-data.frame(X=path[[j]][1],Y=path[[j]][2],GP=i)\n\n      mm<-rbind(mm,tpc)\n    }\n  }\n  print(mm)\n  return(mm)\n}",
    "created" : 1479921527082.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3011100228",
    "id" : "D3111113",
    "lastKnownWriteTime" : 1480537748,
    "last_content_update" : 1480537748087,
    "path" : "C:/Users/shanc/Google Drive/2016F/CSC530/FinalProject/local_alignment/localAlignment.R",
    "project_path" : "localAlignment.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : true,
    "source_window" : "",
    "type" : "r_source"
}